<template>
  <div id="grid">
    <canvas id="canvas" width="300px" height="300px"></canvas>
  </div>
</template>
<script>
export default {
  name: "canvasPage",
  components: {

  },
  data() {
    
    return {
      isHover: false,
      canvas: null,
      ctx: null,
      statusConfig: {
        IDLE: 0,
        DRAG_START: 1,
        DRAGGING: 2
      },
      canvasInfo: {
        status: 0,
        dragTarget: null,
        lastEvtPos: { x: null, y: null },
        offsetEvtPos: { x: null, y: null }
      },
      circles:[
        {
          x:100,
          y:150,
          r:30
        },{
          x:200,
          y:200,
          r:50
        }
      ],
      canvasWidth:0,
      canvasHeight:0
    };
  },
  watch: {
    
  },
  mounted() {
    this.init()
  },
  methods: {
    init() {
      this.canvas = document.getElementById('canvas')
      this.canvasWidth = this.canvas.getBoundingClientRect().left
      this.canvasHeight = this.canvas.getBoundingClientRect().top
      this.ctx = this.canvas.getContext('2d')
      this.drawCircles()
    },
    drawCircles() {
      this.canvasInfo.status = this.statusConfig.IDLE
      
      this.circles.forEach(a => {
        this.drawCircle(a.x, a.y, a.r)
      });
      
      this.canvas.addEventListener('touchstart', e => {
        const circleRef = this.ifInCircle(this.getCanvasPostion(e))
        if (circleRef) {
          this.canvasInfo.dragTarget = circleRef
          this.canvasInfo.status = this.statusConfig.DRAG_START
          this.canvasInfo.lastEvtPos = this.getCanvasPostion(e)
        }
      })
      this.canvas.addEventListener('touchmove', e => {
        if (this.canvasInfo.status === this.statusConfig.DRAG_START && this.getDistance(this.getCanvasPostion(e),this.canvasInfo.lastEvtPos) > 5) {
          this.canvasInfo.status = this.statusConfig.DRAGGING
        } else if (this.canvasInfo.status === this.statusConfig.DRAGGING) {
          console.log('dragging');
          const {dragTarget} = this.canvasInfo
          dragTarget.x = this.getCanvasPostion(e).x
          dragTarget.y = this.getCanvasPostion(e).y
          this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)
          this.circles.forEach(c=>this.drawCircle(c.x,c.y,c.r))
        }
      })
      this.canvas.addEventListener('touchend', e => {
        if (this.canvasInfo.status === this.statusConfig.DRAGGING) {
          this.canvasInfo.status = this.statusConfig.IDLE
        }
      })
    },
    drawCircle(cx, cy, r){
      this.ctx.save()
      this.ctx.beginPath()

      this.ctx.strokeStyle = "green"
      this.ctx.linWidth = this.isHover ? 7 : 5
      this.ctx.arc(cx, cy, r, 0, Math.PI * 2)
      this.ctx.stroke()

      this.ctx.closePath()
      this.ctx.restore()
    },
    ifInCircle(pos){
      for (let index = 0; index < this.circles.length; index++) {
        if (this.getDistance(this.circles[index], pos) < this.circles[index].r) {
          return this.circles[index]
        }
      }
      return false
    },
    getCanvasPostion(e){
      return {
        x: e.changedTouches[0].clientX - this.canvasWidth,
        y: e.changedTouches[0].clientY - this.canvasHeight
      }
    },
    getDistance(p1, p2) {
      return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2)
    }
  },
};
</script>

<style lang="less">
#grid{
  // text-align: center;
  // margin: 20px;
  #canvas{
    border: 1px solid blue;
    
  }
}
</style>